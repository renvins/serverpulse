name: CI Build and Infrastructure Check

# Controls when the workflow will run
on:
  push:
    branches: [ master ] # Or your default branch (e.g., master)
  pull_request:
    branches: [ master ] # Or your default branch

jobs:
  # Job to build the plugin and test Docker infrastructure
  build-and-test-infra:
    runs-on: ubuntu-latest # Use a standard Linux runner with Docker pre-installed

    steps:
      # 1. Checkout your repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up JDK (Adjust version as needed for your project)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin' # Or 'adopt', 'zulu', etc.
          
      # 3. Give permission to gradle to execute commands
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # Setup Gradle - This action handles caching and executing gradle tasks
      # It automatically finds and uses ./gradlew
      - name: Setup Gradle and Build Plugin Jar
        uses: gradle/actions/setup-gradle@v4 # Use v4 or latest stable version

      # Gradle with the new updates doesn't support arguments
      - name: Build jar
        run: ./gradlew shadowJar 

      # --- Infrastructure Testing ---

      # 4. Install jq (needed for parsing InfluxDB health check JSON)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 5. Start Docker Compose services in detached mode
      # Replace 'path/to/your/docker-compose.yml' if it's not in the root
      - name: Start Docker Infrastructure
        run: docker compose -f infra/docker-compose.yml up -d

      # 6. Wait for services to be healthy
      # This is crucial. Services take time to initialize.
      - name: Wait for InfluxDB Health
        run: |
          echo "Waiting for InfluxDB..."
          # Timeout after 90 seconds. Ping /health endpoint. Check status is "pass".
          timeout 90s bash -c ' \
            until curl -sf http://localhost:8086/health | jq -e ".status == \"pass\""; do \
              echo "InfluxDB not ready yet..."; \
              sleep 5; \
            done \
          '
          echo "InfluxDB is ready."

      - name: Wait for Grafana Health
        run: |
          echo "Waiting for Grafana..."
          # Timeout after 60 seconds. Ping /api/health endpoint. Exit code 0 means success.
          timeout 60s bash -c ' \
            until curl -sf http://localhost:3000/api/health; do \
              echo "Grafana not ready yet..."; \
              sleep 5; \
            done \
          '
          echo "Grafana is ready."

      # 7. Stop and remove Docker Compose services
      # The 'if: always()' ensures this runs even if previous steps failed, cleaning up the runner.
      - name: Stop Docker Infrastructure
        if: always()
        run: |
          echo "Stopping Docker containers..."
          docker compose -f infra/docker-compose.yml down -v # -v removes volumes too
  create-release:
    needs: build-and-test-infra
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets

    steps:
      # 1. Checkout Repository code - Needed to access build files/scripts
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up JDK (Must match the version used for building)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Grant permissions to gradle to execute commands
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      # Setup Gradle and Build the Shadow Jar
      - name: Setup Gradle and Build Shadow Jar
        uses: gradle/actions/setup-gradle@v4

      # Build the jar
      - name: Build jar
        run: ./gradlew shadowJar

      # 4. Find the specific Shadow Jar file
      # Adjust the pattern if your shadowJar output has a different name convention
      - name: Find Shadow Jar
        id: find_jar
        run: |
          # Common patterns: *-all.jar, *-shadow.jar, or just your plugin name + version.jar
          # This finds the largest JAR in build/libs, usually the shadowJar
          JAR_FILE=$(find plugin/build/libs -maxdepth 1 -name '*.jar' -printf "%s %p\n" | sort -nr | head -n 1 | awk '{print $2}')
          if [ -z "$JAR_FILE" ]; then
            echo "Error: Could not find the shadow JAR file in plugin/build/libs/"
            exit 1
          fi
          echo "Found JAR for release: $JAR_FILE"
          echo "path=$JAR_FILE" >> $GITHUB_OUTPUT

      # 5. Create GitHub Release and Upload the Shadow Jar
      - name: Create Release and Upload JAR
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: true
          files: ${{ steps.find_jar.outputs.path }} # Upload the specific JAR found earlier
