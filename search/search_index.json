{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the ServerPulse Wiki!","text":"<p>This wiki is the official documentation for ServerPulse, a powerful and easy-to-use open-source performance monitoring tool specifically designed for Minecraft servers.</p> <p>Whether you're a server administrator looking to keep an eye on performance or a developer in need of detailed data, you'll find everything you need here to get started.</p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<p>Explore the sections below to learn how to get the most out of ServerPulse.</p> <ul> <li>1. Getting Started<ul> <li>Step-by-step instructions for installation and initial setup.</li> </ul> </li> <li>2. Configuration<ul> <li>A detailed guide to all available configuration options.</li> </ul> </li> <li>3. Commands &amp; Permissions<ul> <li>A complete list of commands and the permissions required to use them.</li> </ul> </li> <li>4. Alert System<ul> <li>How to set up and customize alerts for Discord and Telegram.</li> </ul> </li> <li>5. Developer API<ul> <li>Information for developers on how to integrate their own plugins with ServerPulse.</li> </ul> </li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>ServerPulse is an open-source project, and we welcome all contributions. If you want to help improve it, please check our Contributing Guidelines.</p>"},{"location":"#support-community","title":"\ud83d\udcac Support &amp; Community","text":"<p>Encountered an issue or need assistance? - Open an Issue: If you find a bug or have a specific problem, open an issue on our GitHub tracker.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>ServerPulse is released under the GNU General Public License v3.0.</p>"},{"location":"alerts/","title":"Alert System","text":"<p>ServerPulse includes a robust alert system that can notify you about important server events through Discord or Telegram. This guide covers setting up and customizing alerts.</p>"},{"location":"alerts/#contact-point-setup","title":"Contact Point Setup","text":"<p>ServerPulse supports multiple notification channels. You can choose either Discord or Telegram (or both) for your alerts.</p>"},{"location":"alerts/#discord-integration-setup","title":"Discord Integration Setup","text":"<ol> <li> <p>Creating a Discord Webhook</p> <ol> <li>Open your Discord server settings.</li> <li>Navigate to \"Integrations\" \u2192 \"Webhooks\".</li> <li>Click \"Create Webhook\".</li> <li>Choose a name and channel for alerts.</li> <li>Copy the webhook URL.</li> </ol> </li> <li> <p>Configuring Discord Integration</p> <ol> <li> <p>Open <code>infra/grafana/provisioning/alerting/discord_contact.yml</code>.</p> </li> <li> <p>Replace the example webhook URL with yours:</p> <p><code>yaml apiVersion: 1 contactPoints:   - orgId: 1     name: Discord contact point     receivers:       - uid: deiz0m4w2afpcb         type: discord         settings:           url: https://discord.com/api/webhooks/your-webhook  # Replace this           message: '{{ template \"discord.default.message\" . }}'           title: '{{ template \"default.title\" . }}'</code></p> </li> </ol> </li> </ol>"},{"location":"alerts/#telegram-integration-setup","title":"Telegram Integration Setup","text":"<ol> <li> <p>Creating a Telegram Bot</p> <ol> <li>Open Telegram and search for \"@BotFather\".</li> <li>Start a chat and send the command <code>/newbot</code>.</li> <li>Follow the instructions to create your bot.</li> <li>Copy the bot token provided by BotFather.</li> </ol> </li> <li> <p>Getting Your Chat ID</p> <ol> <li>Add your bot to a group or start a private conversation with it.</li> <li>Send any message to the bot.</li> <li>Visit <code>https://api.telegram.org/bot&lt;YourBOTToken&gt;/getUpdates</code>.</li> <li>Look for the \"chat\" object and copy the \"id\" value.</li> </ol> </li> <li> <p>Configuring Telegram Integration</p> <ol> <li>Open <code>infra/grafana/provisioning/alerting/telegram_contact.yml</code>.</li> <li>Replace the example values with yours:     <code>yaml     apiVersion: 1     contactPoints:         - orgId: 1           name: Telegram contact point           receivers:             - uid: eejlr7re61og0e               type: telegram               settings:                 bottoken: your_bot_token      # Replace with your bot token                 chatid: \"your_chat_id\"       # Replace with your chat ID                 disable_notification: false                 disable_web_page_preview: false                 protect_content: false               disableResolveMessage: false</code></li> </ol> </li> </ol>"},{"location":"alerts/#choosing-your-contact-point-for-alerts","title":"Choosing Your Contact Point for Alerts","text":"<p>After setting up your desired contact points (Discord, Telegram, or both), you need to select which one to use for your alerts:</p>"},{"location":"alerts/#setting-the-default-contact-point","title":"Setting the Default Contact Point","text":"<ol> <li> <p>Edit the Contact Policy</p> <ol> <li>Open <code>infra/grafana/provisioning/alerting/contact_policy.yml</code>.</li> <li>Change the <code>receiver</code> value to your preferred contact point:     ```yaml     apiVersion: 1     policies:<ul> <li>orgId: 1     receiver: Discord contact point  # Change to \"Telegram contact point\" if preferred     group_wait: 0s     group_interval: 30s     repeat_interval: 3m ```</li> </ul> </li> </ol> </li> <li> <p>Update Alert Rules</p> <ol> <li>Open <code>infra/grafana/provisioning/alerting/metrics.yml</code>.</li> <li>For each alert rule, update the <code>receiver</code> in the notification settings:     <code>yaml     notification_settings:       receiver: Discord contact point  # Change to \"Telegram contact point\" if preferred</code></li> </ol> </li> <li> <p>Apply Changes</p> <p><code>bash docker compose down docker compose up -d</code></p> </li> </ol>"},{"location":"alerts/#creating-multiple-contact-policies","title":"Creating Multiple Contact Policies","text":"<p>If you want to use different contact points for different alerts, you can create multiple policies:</p> <ol> <li> <p>Edit the Contact Policy</p> <p><code>yaml apiVersion: 1 policies:   - orgId: 1     name: Critical Alerts     # Add a name for clarity     receiver: Discord contact point     group_wait: 0s     group_interval: 30s     repeat_interval: 3m     matcher:       - name: severity         value: critical   - orgId: 1     name: Warning Alerts      # Add a name for clarity     receiver: Telegram contact point     group_wait: 0s     group_interval: 1m     repeat_interval: 5m     matcher:       - name: severity         value: warning</code></p> </li> <li> <p>Set Alert Severity Labels     When creating alerts, add a label \"severity\" with value \"critical\" or \"warning\" to route them to the correct contact point.</p> </li> </ol>"},{"location":"alerts/#default-alert-rules","title":"Default Alert Rules","text":"<p>ServerPulse comes with pre-configured alerts:</p>"},{"location":"alerts/#tps-monitoring","title":"TPS Monitoring","text":"<p>The default alert triggers when TPS drops below 18, evaluating every 10 seconds with 5-minute historical context.</p>"},{"location":"alerts/#creating-alerts-via-grafana-ui","title":"Creating Alerts via Grafana UI","text":"<p>Most server administrators will find it easier to create and manage alerts directly through the Grafana user interface.</p>"},{"location":"alerts/#accessing-alert-management","title":"Accessing Alert Management","text":"<ol> <li>Log in to your Grafana instance (typically http://localhost:3000).</li> <li>In the left sidebar, click on the bell icon (Alerting).</li> <li>This opens the Alerting page where you can manage all your alerts.</li> </ol>"},{"location":"alerts/#creating-a-new-alert-rule","title":"Creating a New Alert Rule","text":"<ol> <li>From the Alerting page, click on \"Alert rules\" in the sidebar.</li> <li>Click the \"New alert rule\" button.</li> <li>Configure your alert in the three sections:</li> </ol>"},{"location":"alerts/#1-define-query-and-alert-condition","title":"1. Define query and alert condition","text":"<ol> <li>Select your InfluxDB data source.</li> <li>Write your Flux query or use the query builder:     <code>from(bucket: \"metrics_db\")       |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)       |&gt; filter(fn: (r) =&gt; r._measurement == \"minecraft_stats\")       |&gt; filter(fn: (r) =&gt; r._field == \"used_memory\")       |&gt; filter(fn: (r) =&gt; r.server == \"your-server-name\")</code></li> <li>In the \"Threshold\" section, set the alert trigger condition:<ul> <li>Select \"Is above\" for memory alerts or \"Is below\" for TPS alerts.</li> <li>Enter your threshold value (e.g., 18 for TPS, 80% for memory usage).</li> </ul> </li> </ol>"},{"location":"alerts/#2-add-alert-rule-details","title":"2. Add alert rule details","text":"<ol> <li>Give your alert a descriptive name (e.g., \"High Memory Usage\").</li> <li>Set an appropriate evaluation interval (e.g., 10s for critical metrics, 1m for less critical ones).</li> <li>Optionally add a summary and description to provide more context.</li> <li>Add any labels needed for routing (e.g., <code>severity=critical</code>).</li> </ol>"},{"location":"alerts/#3-add-notifications","title":"3. Add notifications","text":"<ol> <li> <p>Select your preferred contact point (Discord or Telegram).</p> </li> <li> <p>Configure the message template (or use the default).</p> </li> <li> <p>Set notification timing:</p> <ul> <li>Group interval: How long to wait before sending an updated notification (e.g., 30s).</li> <li>Auto resolve: Toggle if alerts should automatically resolve.</li> <li>Resolve timeout: How long before considering an alert resolved if no longer triggering.</li> </ul> </li> <li> <p>Click \"Save and exit\" to activate your alert.</p> </li> </ol>"},{"location":"alerts/#example-alerts-to-create","title":"Example Alerts to Create","text":"<p>Here are some useful alerts you might want to set up:</p>"},{"location":"alerts/#low-tps-alert","title":"Low TPS Alert","text":"<ul> <li>Query:   <code>from(bucket: \"metrics_db\")     |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)     |&gt; filter(fn: (r) =&gt; r._measurement == \"minecraft_stats\")     |&gt; filter(fn: (r) =&gt; r._field == \"tps_1m\")     |&gt; filter(fn: (r) =&gt; r.server == \"your-server-name\")</code></li> <li>Condition: Is below 18</li> <li>Name: \"Low TPS Alert\"</li> <li>Evaluation: Every 10s</li> <li>Label: severity=critical</li> </ul>"},{"location":"alerts/#high-memory-usage-alert","title":"High Memory Usage Alert","text":"<ul> <li>Query:   <code>from(bucket: \"metrics_db\")     |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)     |&gt; filter(fn: (r) =&gt; r._measurement == \"minecraft_stats\")     |&gt; filter(fn: (r) =&gt; r._field == \"used_memory\")     |&gt; filter(fn: (r) =&gt; r.server == \"your-server-name\")</code></li> <li>Condition: Is above your threshold (e.g., 80% of your server's allocated memory).</li> <li>Name: \"High Memory Usage\"</li> <li>Evaluation: Every 30s</li> <li>Label: severity=critical</li> </ul>"},{"location":"alerts/#low-disk-space-alert","title":"Low Disk Space Alert","text":"<ul> <li>Query:   <code>from(bucket: \"metrics_db\")     |&gt; range(start: v.timeRangeStart, stop: v.timeRangeStop)     |&gt; filter(fn: (r) =&gt; r._measurement == \"minecraft_stats\")     |&gt; filter(fn: (r) =&gt; r._field == \"usable_disk_space\")     |&gt; filter(fn: (r) =&gt; r.server == \"your-server-name\")</code></li> <li>Condition: Is below your threshold (e.g., 10GB).</li> <li>Name: \"Low Disk Space\"</li> <li>Evaluation: Every 5m</li> <li>Label: severity=warning</li> </ul>"},{"location":"alerts/#testing-alerts","title":"Testing Alerts","text":"<ol> <li> <p>Simulate trigger conditions:</p> <ul> <li>For TPS: Use a plugin or command to stress test the server.</li> <li>For memory: Load a lot of chunks or spawn many entities.</li> <li>For disk space: Create large temporary files in your server directory.</li> </ul> </li> <li> <p>Verify Integration:</p> <ul> <li>Check Discord channel or Telegram chat for alert messages.</li> <li>Confirm formatting and content.</li> </ul> </li> </ol>"},{"location":"alerts/#troubleshooting","title":"Troubleshooting","text":"<p>If alerts aren't working:</p> <ol> <li>Check webhook URL or bot token for typos.</li> <li>Verify Grafana can reach the Discord/Telegram API.</li> <li>Confirm your alert conditions are correctly configured.</li> <li>Look for error messages in Grafana's alert history.</li> <li>Test the contact point by sending a test notification.</li> <li>Ensure the correct contact point is selected in your alert rules and policies.</li> </ol>"},{"location":"commands/","title":"ServerPulse Commands and Permissions","text":"<p>This guide covers all available commands and permissions for ServerPulse across all supported platforms: Bukkit/Paper, BungeeCord, Velocity, and Fabric.</p>"},{"location":"commands/#commands","title":"Commands","text":""},{"location":"commands/#bukkitpaper-commands","title":"Bukkit/Paper Commands","text":"Command Description Permission <code>/serverpulse status</code> Check connection status with InfluxDB. <code>serverpulse.status</code> <code>/serverpulse reload</code> Reload plugin configuration. <code>serverpulse.reload</code>"},{"location":"commands/#bungeecord-commands","title":"BungeeCord Commands","text":"Command Description Permission <code>/serverpulsebungeecord status</code> Check connection status with InfluxDB. <code>serverpulse.status</code> <code>/serverpulsebungeecord reload</code> Reload plugin configuration. <code>serverpulse.reload</code>"},{"location":"commands/#velocity-commands","title":"Velocity Commands","text":"Command Description Permission <code>/serverpulsevelocity status</code> Check connection status with InfluxDB. <code>serverpulse.status</code> <code>/serverpulsevelocity reload</code> Reload plugin configuration. <code>serverpulse.reload</code>"},{"location":"commands/#fabric-commands","title":"Fabric Commands","text":"Command Description Permission <code>/serverpulse status</code> Check connection status with InfluxDB. <code>serverpulse.status</code> <code>/serverpulse reload</code> Reload plugin configuration. <code>serverpulse.reload</code>"},{"location":"commands/#console-commands","title":"Console Commands","text":"<p>All ServerPulse commands can be run from the server console without requiring specific permissions.</p>"},{"location":"commands/#command-aliases","title":"Command Aliases","text":"<ul> <li>In BungeeCord, you can use <code>/spb</code> or <code>/sp</code> as short forms of <code>/serverpulsebungeecord</code>.</li> <li>In Velocity, you can use <code>/spv</code> as a short form of <code>/serverpulsevelocity</code>.</li> <li>Bukkit/Paper and Fabric do not have command aliases by default.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#serverpulse-configuration-guide","title":"ServerPulse Configuration Guide","text":"<p>This guide covers all configuration options available in ServerPulse across all supported platforms: Bukkit/Paper, BungeeCord, Velocity, and Fabric.</p>"},{"location":"configuration/#configuration-files-locations","title":"Configuration Files Locations","text":"<p>Each platform stores its configuration in a different location:</p> <ul> <li>Bukkit/Paper: <code>plugins/ServerPulse/config.yml</code></li> <li>BungeeCord: <code>plugins/ServerPulse/config.yml</code></li> <li>Velocity: <code>plugins/serverpulse/config.yml</code></li> <li>Fabric: <code>config/serverpulse/config.yml</code></li> </ul>"},{"location":"configuration/#common-configuration-structure","title":"Common Configuration Structure","text":"<p>All platforms share the same core configuration structure with minor variations in the messages section:</p> <pre><code>metrics:\n  interval: 5              # Collection interval in seconds\n  influxdb:\n    url: http://localhost:8086  # InfluxDB API URL\n    org: my-org              # Organization name\n    bucket: metrics_db       # Bucket for storing metrics\n    token: my-token          # API token (replace this!)\n    table: minecraft_stats   # Measurement name in InfluxDB\n  tags:\n    server: \"server-id\"      # Server identifier (change this for each server)\nmessages:\n  # Message configurations vary by platform (see below)\n</code></pre>"},{"location":"configuration/#platform-specific-configurations","title":"Platform-Specific Configurations","text":""},{"location":"configuration/#bukkitpaper-configuration","title":"Bukkit/Paper Configuration","text":"<p>Default configuration with explanations:</p> <pre><code>metrics:\n  interval: 5\n  influxdb:\n    url: http://localhost:8086\n    org: my-org\n    bucket: metrics_db\n    token: my-token\n    table: minecraft_stats\n  tags:\n    server: \"bed1\"      # Change to a unique identifier for your server\nmessages:\n  noPerms: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7You don't have &amp;bpermission &amp;7to use this &amp;bcommand&amp;7.\"\n  reloadConfig: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Configuration &amp;breloaded&amp;7.\"\n  reloadConfigError: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Error &amp;breloading &amp;7configuration...\"\n  noArgs: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7You need to specify a &amp;bcommand&amp;7: &amp;breload&amp;7, &amp;bstatus&amp;7.\"\n  playerOnly: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7This command can only be used by &amp;bplayers&amp;7.\"\n  noCommand: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7This command is not &amp;bavailable&amp;7.\"\n  reloadConfigUsage: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Usage: &amp;b/serverpulse reload&amp;7.\"\n  statusConfigUsage: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Usage: &amp;b/serverpulse status&amp;7.\"\n  statusConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Connected to &amp;bInfluxDB&amp;7.\"\n  statusNotConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Not connected to &amp;bInfluxDB&amp;7.\"\n</code></pre>"},{"location":"configuration/#bungeecord-configuration","title":"BungeeCord Configuration","text":"<pre><code>metrics:\n  interval: 5\n  influxdb:\n    url: http://localhost:8086\n    org: my-org\n    bucket: metrics_db\n    token: my-token\n    table: minecraft_stats\n  tags:\n    server: \"bungeecord\"      # Change to a unique identifier for your proxy\nmessages:\n  noPerms: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7You don't have &amp;bpermission &amp;7to use this &amp;bcommand&amp;7.\"\n  reloadConfig: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Configuration &amp;breloaded&amp;7.\"\n  reloadConfigError: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Error &amp;breloading &amp;7configuration...\"\n  noArgs: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7You need to specify a &amp;bcommand&amp;7: &amp;breload&amp;7, &amp;bstatus&amp;7.\"\n  playerOnly: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7This command can only be used by &amp;bplayers&amp;7.\"\n  noCommand: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7This command is not &amp;bavailable&amp;7.\"\n  reloadConfigUsage: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Usage: &amp;b/serverpulse reload&amp;7.\"\n  statusConfigUsage: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Usage: &amp;b/serverpulse status&amp;7.\"\n  statusConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Connected to &amp;bInfluxDB&amp;7.\"\n  statusNotConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Not connected to &amp;bInfluxDB&amp;7.\"\n</code></pre>"},{"location":"configuration/#velocity-configuration","title":"Velocity Configuration","text":"<pre><code>metrics:\n  interval: 5\n  influxdb:\n    url: http://localhost:8086\n    org: my-org\n    bucket: metrics_db\n    token: my-token\n    table: minecraft_stats\n  tags:\n    server: \"velocity1\"   # Change to a unique identifier for your proxy\nmessages:\n  usage: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Please use &amp;b/serverpulsevelocity [status|reload]&amp;7.\"\n  reloadConfig: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Configuration &amp;breloaded&amp;7.\"\n  reloadConfigError: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Error &amp;breloading &amp;7configuration...\"\n  statusConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Connected to &amp;bInfluxDB&amp;7.\"\n  statusNotConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Not connected to &amp;bInfluxDB&amp;7.\"\n</code></pre>"},{"location":"configuration/#fabric-configuration","title":"Fabric Configuration","text":"<pre><code>metrics:\n  interval: 5\n  influxdb:\n    url: http://localhost:8086\n    org: my-org\n    bucket: metrics_db\n    token: my-token\n    table: minecraft_stats\n  tags:\n    server: \"fabric1\"     # Change to a unique identifier for your Fabric server\nmessages:\n  usage: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Please use &amp;b/serverpulsevelocity [status|reload]&amp;7.\"\n  reloadConfig: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Configuration &amp;breloaded&amp;7.\"\n  reloadConfigError: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Error &amp;breloading &amp;7configuration...\"\n  statusConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Connected to &amp;bInfluxDB&amp;7.\"\n  statusNotConnected: \"&amp;7[&amp;bServer&amp;7Pulse] &amp;7Not connected to &amp;bInfluxDB&amp;7.\"\n</code></pre>"},{"location":"configuration/#metrics-settings","title":"Metrics Settings","text":""},{"location":"configuration/#main-options","title":"Main Options","text":"<ul> <li><code>metrics.interval</code>: How often metrics are collected and sent.<ul> <li>Value is in seconds.</li> <li>Recommended: 5-15 seconds.</li> <li>A lower value provides more granular data but may increase server impact.</li> </ul> </li> </ul>"},{"location":"configuration/#influxdb-connection","title":"InfluxDB Connection","text":""},{"location":"configuration/#required-settings","title":"Required Settings","text":"<ul> <li> <p><code>metrics.influxdb.url</code>: The full URL of your InfluxDB v2 instance, including the port.</p> <ul> <li>Format: <code>http://hostname:port</code></li> <li>The default port for InfluxDB is <code>8086</code>.</li> <li>Use <code>localhost</code> if ServerPulse is running on the same machine as InfluxDB.</li> </ul> </li> <li> <p><code>metrics.influxdb.org</code>: The organization name you created during the InfluxDB setup.</p> <ul> <li>Default used in documentation: <code>my-org</code>.</li> </ul> </li> <li> <p><code>metrics.influxdb.bucket</code>: The name of the bucket where metrics will be stored.</p> <ul> <li>This bucket must exist in your InfluxDB organization.</li> <li>Default used in documentation: <code>metrics_db</code>.</li> </ul> </li> <li> <p><code>metrics.influxdb.token</code>: The API token for authentication.</p> <ul> <li>This token must have write and read permissions for the specified bucket.</li> <li>Important: Treat this token like a password. Do not share it publicly.</li> </ul> </li> <li> <p><code>metrics.influxdb.table</code>: The name for the measurement where your server data is stored in InfluxDB.</p> <ul> <li>Default: <code>minecraft_stats</code>.</li> <li>It is recommended to keep the default value unless you have a specific reason to change it.</li> </ul> </li> </ul>"},{"location":"configuration/#tags-system","title":"Tags System","text":"<p>Tags are used to label and organize your data, making it easy to filter and group in Grafana.</p>"},{"location":"configuration/#server-tag","title":"Server Tag","text":"<p>The <code>metrics.tags.server</code> setting is crucial for identifying metrics from different servers. You must use a unique identifier for each server instance you monitor.</p> <ul> <li>For Bukkit/Paper servers:</li> </ul> <p><code>yaml   metrics:     tags:       server: \"survival-1\"</code></p> <ul> <li>For BungeeCord proxies:</li> </ul> <p><code>yaml   metrics:     tags:       server: \"bungeecord1\"</code></p> <ul> <li>For Velocity proxies:</li> </ul> <p><code>yaml   metrics:     tags:       server: \"velocity1\"</code></p> <ul> <li>For Fabric servers:</li> </ul> <p><code>yaml   metrics:     tags:       server: \"fabric1\"</code></p>"},{"location":"configuration/#custom-tags","title":"Custom Tags","text":"<p>You can add any other custom tags under the <code>metrics.tags</code> section to add more dimensions to your data.</p> <pre><code>metrics:\n  tags:\n    server: \"survival-1\"\n    region: \"eu-west\"      # e.g., Geographic location\n    type: \"survival\"       # e.g., Server gamemode\n    network: \"main\"        # e.g., Network identifier\n</code></pre> <p>These tags are automatically applied to all metrics sent from the server and can be used for advanced filtering in your Grafana dashboards.</p>"},{"location":"configuration/#messages-configuration","title":"Messages Configuration","text":"<p>All platforms support customizing the in-game messages sent by the plugin's commands. Messages support standard Minecraft color codes using the <code>&amp;</code> symbol. These messages are reloaded when you use the reload command for your platform.</p>"},{"location":"configuration/#platform-specific-considerations","title":"Platform-Specific Considerations","text":""},{"location":"configuration/#bukkitpaper-specific-settings","title":"Bukkit/Paper Specific Settings","text":"<p>The Bukkit/Paper implementation automatically detects if you're running Paper (or a fork) and uses the native <code>Bukkit.getTPS()</code> method for higher accuracy. If you're running standard Bukkit or Spigot, it falls back to a custom tick-monitoring implementation to calculate TPS.</p>"},{"location":"configuration/#bungeecordvelocity-specific-settings","title":"BungeeCord/Velocity Specific Settings","text":"<p>Proxy implementations like BungeeCord and Velocity focus on network-level metrics. They do not report TPS or world-related data (entities, chunks), as these metrics are not applicable to a proxy. Instead, they provide accurate player counts and ping statistics for the entire network.</p>"},{"location":"configuration/#fabric-specific-settings","title":"Fabric Specific Settings","text":"<p>The Fabric implementation includes a custom TPS retriever that monitors server tick durations to calculate 1-minute, 5-minute, and 15-minute averages. It also reports per-world data, including entity counts and loaded chunks, using the Fabric API.</p>"},{"location":"configuration/#multi-server-setup","title":"Multi-Server Setup","text":"<p>When monitoring a network of servers, a consistent tagging strategy is key.</p> <ol> <li>Assign a unique <code>server</code> tag to each server, proxy, and mod instance.</li> <li>Use custom tags like <code>network</code> or <code>type</code> to group related servers.</li> <li>Point all ServerPulse configurations to the same InfluxDB instance.</li> <li>In Grafana, the pre-built dashboards are designed to filter by the <code>server</code> tag, allowing you to view metrics for each server individually.</li> </ol>"},{"location":"configuration/#sample-multi-server-config","title":"Sample Multi-Server Config","text":"<p>Here's an example of how to configure ServerPulse in a network with multiple server types:</p> <ul> <li>Main Velocity Proxy (<code>velocity/plugins/serverpulse/config.yml</code>):</li> </ul> <p><code>yaml   metrics:     tags:       server: \"proxy-main\"       type: \"proxy\"       network: \"main-network\"</code></p> <ul> <li>Bukkit Survival Server (<code>bukkit/plugins/ServerPulse/config.yml</code>):</li> </ul> <p><code>yaml   metrics:     tags:       server: \"survival-1\"       type: \"survival\"       network: \"main-network\"</code></p> <ul> <li>Fabric Creative Server (<code>fabric/config/serverpulse/config.yml</code>):</li> </ul> <p><code>yaml   metrics:     tags:       server: \"creative-fabric\"       type: \"creative\"       network: \"main-network\"</code></p> <p>This structure allows you to filter metrics in Grafana by server type, specific server, or the entire network.</p>"},{"location":"configuration/#verifying-configuration","title":"Verifying Configuration","text":"<p>After applying your configuration changes, restart your server and use the status command to verify the connection to InfluxDB.</p> <ul> <li>For Bukkit/Paper: <code>/serverpulse status</code></li> <li>For BungeeCord: <code>/serverpulsebungeecord status</code> (aliases: <code>/sp</code>, <code>/spb</code>)</li> <li>For Velocity: <code>/serverpulsevelocity status</code> (alias: <code>/spv</code>)</li> <li>For Fabric: <code>/serverpulse status</code></li> </ul> <p>All commands require the <code>serverpulse.status</code> permission and will confirm whether the connection to InfluxDB is active.</p>"},{"location":"developer_api/","title":"Developer API","text":"<p>ServerPulse provides a comprehensive API that allows other plugins to interact with and extend its functionality. This guide covers how to integrate with ServerPulse and use its features in your plugins.</p>"},{"location":"developer_api/#adding-serverpulse-as-a-dependency","title":"Adding ServerPulse as a Dependency","text":"<p>To use the ServerPulse API, you need to add it to your project's dependencies.</p>"},{"location":"developer_api/#plugin-dependency","title":"Plugin Dependency","text":"<p>First, declare a dependency on ServerPulse in your <code>plugin.yml</code> (for Bukkit/BungeeCord) or equivalent metadata file. This ensures your plugin loads after ServerPulse.</p> <pre><code># For Bukkit/BungeeCord plugin.yml\ndepend: [ServerPulse]          # Hard dependency\n# OR\nsoftdepend: [ServerPulse]      # Soft dependency\n````\n\n### Maven Dependency\n\nAdd the JitPack repository and the API dependency to your `pom.xml`.\n\n```xml\n&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;jitpack.io&lt;/id&gt;\n        &lt;url&gt;[https://jitpack.io](https://jitpack.io)&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/repositories&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.github.renvins.serverpulse&lt;/groupId&gt;\n    &lt;artifactId&gt;api&lt;/artifactId&gt;\n    &lt;version&gt;0.4.5-SNAPSHOT&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"developer_api/#gradle-dependency","title":"Gradle Dependency","text":"<p>Add the JitPack repository and the API dependency to your <code>build.gradle.kts</code>.</p> <pre><code>repositories {\n    mavenCentral()\n    maven { url = uri(\"[https://jitpack.io](https://jitpack.io)\") }\n}\n\ndependencies {\n    // Replace with the desired release version\n    compileOnly(\"com.github.renvins.serverpulse:api:0.4.5-SNAPSHOT\")\n}\n</code></pre>"},{"location":"developer_api/#getting-started","title":"Getting Started","text":""},{"location":"developer_api/#accessing-the-api","title":"Accessing the API","text":"<p>The <code>ServerPulseAPI</code> is accessible via the static <code>ServerPulseProvider</code> class. It's good practice to check if the ServerPulse plugin is enabled before accessing the API.</p> <pre><code>import it.renvins.serverpulse.api.ServerPulseAPI;\nimport it.renvins.serverpulse.api.ServerPulseProvider;\nimport org.bukkit.plugin.java.JavaPlugin;\n\npublic class YourPlugin extends JavaPlugin {\n\n    @Override\n    public void onEnable() {\n        // Check if ServerPulse is available on the server\n        if (getServer().getPluginManager().getPlugin(\"ServerPulse\") != null) {\n            try {\n                ServerPulseAPI api = ServerPulseProvider.get();\n                // You can now use the API\n                getLogger().info(\"Successfully hooked into ServerPulse API!\");\n            } catch (IllegalStateException e) {\n                // This will be thrown if the API is not registered\n                getLogger().warning(\"ServerPulse API is not available: \" + e.getMessage());\n            }\n        } else {\n            getLogger().warning(\"ServerPulse plugin not found!\");\n        }\n    }\n}\n</code></pre>"},{"location":"developer_api/#core-api-components","title":"Core API Components","text":"<p>The <code>ServerPulseAPI</code> interface provides access to all public-facing services of the plugin.</p>"},{"location":"developer_api/#database-service","title":"Database Service","text":"<p>The <code>IDatabaseService</code> interface provides methods for interacting with InfluxDB.</p> <pre><code>IDatabaseService dbService = api.getDatabaseService();\n\n// Check the current connection status to InfluxDB\nboolean isConnected = dbService.isConnected();\ngetLogger().info(\"Connection status: \" + isConnected);\n\n// Send a custom data point using InfluxDB's Line Protocol format\nLineProtocolPoint point = new LineProtocolPoint(\"custom_stats\")\n    .addTag(\"plugin\", \"YourPluginName\")\n    .addField(\"custom_value\", 123)\n    .setTimestamp(System.currentTimeMillis() * 1_000_000); // Timestamp in nanoseconds\n\n// The write operation is asynchronous and returns a CompletableFuture\ndbService.writeLineProtocol(point.toLineProtocol()).thenAccept(success -&gt; {\n    if (success) {\n        getLogger().info(\"Successfully wrote custom metric to InfluxDB.\");\n    } else {\n        getLogger().warning(\"Failed to write custom metric to InfluxDB.\");\n    }\n});\n</code></pre>"},{"location":"developer_api/#metrics-service","title":"Metrics Service","text":"<p>The <code>IMetricsService</code> interface allows you to interact with the metric collection process.</p> <pre><code>IMetricsService metricsService = api.getMetricsService();\n\n// Manually trigger a metric collection and sending cycle\n// This will gather all standard ServerPulse metrics and send them to InfluxDB\nmetricsService.collectAndSendMetrics();\n</code></pre>"},{"location":"developer_api/#retrievers","title":"Retrievers","text":"<p>ServerPulse provides several retrievers to get specific metrics on demand.</p>"},{"location":"developer_api/#disk-metrics","title":"Disk Metrics","text":"<p>The <code>IDiskRetriever</code> interface provides information about the server's disk space.</p> <pre><code>IDiskRetriever diskRetriever = api.getDiskRetriever();\n\n// Get total and usable disk space in bytes\nlong totalSpace = diskRetriever.getTotalSpace();\nlong usableSpace = diskRetriever.getUsableSpace();\n\ngetLogger().info(\"Disk space: \" + usableSpace / (1024*1024) + \" MB free out of \" + totalSpace / (1024*1024) + \" MB\");\n</code></pre>"},{"location":"developer_api/#player-ping","title":"Player Ping","text":"<p>The <code>IPingRetriever</code> interface provides statistics about player latency.</p> <pre><code>IPingRetriever pingRetriever = api.getPingRetriever();\n\n// Get min, max, and average ping for all online players\nint minPing = pingRetriever.getMinPing();\nint maxPing = pingRetriever.getMaxPing();\nint avgPing = pingRetriever.getAveragePing();\n\ngetLogger().info(\"Player ping (ms): Min=\" + minPing + \", Avg=\" + avgPing + \", Max=\" + maxPing);\n</code></pre>"},{"location":"developer_api/#example-custom-metrics-plugin","title":"Example: Custom Metrics Plugin","text":"<p>Here's a complete example of a simple Bukkit plugin that hooks into ServerPulse to send custom data to InfluxDB.</p> <pre><code>import it.renvins.serverpulse.api.ServerPulseAPI;\nimport it.renvins.serverpulse.api.ServerPulseProvider;\nimport it.renvins.serverpulse.api.data.LineProtocolPoint;\nimport org.bukkit.plugin.Plugin;\nimport org.bukkit.plugin.java.JavaPlugin;\n\nimport java.util.Random;\n\npublic class CustomMetricsPlugin extends JavaPlugin {\n\n    private ServerPulseAPI api;\n    private final Random random = new Random();\n\n    @Override\n    public void onEnable() {\n        if (!setupServerPulse()) {\n            getLogger().severe(\"ServerPulse not found. This plugin requires ServerPulse to function.\");\n            getServer().getPluginManager().disablePlugin(this);\n            return;\n        }\n\n        startMetricsTask();\n    }\n\n    private boolean setupServerPulse() {\n        Plugin serverPulsePlugin = getServer().getPluginManager().getPlugin(\"ServerPulse\");\n        if (serverPulsePlugin == null) {\n            return false;\n        }\n\n        try {\n            api = ServerPulseProvider.get();\n            return true;\n        } catch (IllegalStateException e) {\n            getLogger().severe(\"Failed to get ServerPulse API: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    private void startMetricsTask() {\n        // Run a task every minute (1200 ticks) to send custom metrics\n        getServer().getScheduler().runTaskTimerAsynchronously(this, () -&gt; {\n            if (api == null || !api.getDatabaseService().isConnected()) {\n                return; // Don't try to send metrics if not connected\n            }\n\n            // Create a custom data point\n            LineProtocolPoint point = new LineProtocolPoint(\"my_custom_metrics\")\n                .addTag(\"plugin\", \"CustomMetricsPlugin\")\n                .addField(\"random_value\", random.nextInt(100))\n                .addField(\"some_other_data\", getSomeData())\n                .setTimestamp(System.currentTimeMillis() * 1_000_000);\n\n            // Send the data using the API\n            api.getDatabaseService().writeLineProtocol(point.toLineProtocol());\n\n        }, 0L, 1200L);\n    }\n\n    private String getSomeData() {\n        // Your logic to get custom data\n        return \"example_data\";\n    }\n}\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#serverpulse-installation-guide","title":"ServerPulse Installation Guide \ud83d\udcca","text":"<p>This guide provides a comprehensive walkthrough for setting up ServerPulse, a real-time performance monitoring tool for Minecraft servers. You'll learn how to set up the monitoring infrastructure with InfluxDB and Grafana using Docker, and how to install and configure the ServerPulse plugin on your Minecraft server.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed on your system:</p> <ul> <li>Docker and Docker Compose: These tools are essential for running the monitoring infrastructure. If you don't have them, you can download them from the official Docker website.</li> <li>Java 21 or newer: This is required to run the ServerPulse plugin on your Minecraft server.</li> <li>A Minecraft server:<ul> <li>Bukkit/Spigot/Paper</li> <li>BungeeCord</li> <li>Velocity</li> <li>Fabric</li> </ul> </li> </ul>"},{"location":"getting_started/#step-1-setting-up-the-monitoring-infrastructure","title":"Step 1: Setting Up the Monitoring Infrastructure \ud83c\udfd7\ufe0f","text":"<p>The monitoring infrastructure consists of InfluxDB for data storage and Grafana for data visualization. ServerPulse provides a Docker Compose setup to get you up and running quickly.</p> <ol> <li> <p>Download ServerPulse:</p> <ul> <li>You can either download the latest release from the ServerPulse GitHub repository or clone it using Git.</li> </ul> </li> <li> <p>Navigate to the <code>infra</code> Directory:</p> <ul> <li>Open a terminal or command prompt and navigate to the <code>infra</code> directory within the downloaded ServerPulse files.</li> </ul> </li> <li> <p>Start the Docker Containers:</p> <ul> <li>Run the following command to start the InfluxDB and Grafana containers in the background:   <code>bash   docker compose up -d</code></li> <li>This command will download the necessary Docker images and start the services. You can check the status of the containers with <code>docker compose ps</code>.</li> </ul> </li> </ol>"},{"location":"getting_started/#step-2-configuring-influxdb","title":"Step 2: Configuring InfluxDB \u2699\ufe0f","text":"<p>Once the InfluxDB container is running, you need to perform a one-time setup.</p> <ol> <li> <p>Access the InfluxDB UI:</p> <ul> <li>Open your web browser and go to <code>http://localhost:8086</code>.</li> </ul> </li> <li> <p>Initial Setup:</p> <ul> <li>You will be prompted to set up your initial user. Create a username and password.</li> <li>For the Initial Organization Name, enter <code>my-org</code>.</li> <li>For the Initial Bucket Name, enter <code>metrics_db</code>.</li> </ul> </li> <li> <p>Create an API Token:</p> <ul> <li>In the InfluxDB UI, navigate to Load Data &gt; API Tokens.</li> <li>Click on Generate API Token and select Custom API Token.</li> <li>Configure the token with the following permissions:<ul> <li>Read access to the <code>metrics_db</code> bucket.</li> <li>Write access to the <code>metrics_db</code> bucket.</li> </ul> </li> <li>Give your token a descriptive name, like <code>serverpulse-token</code>.</li> <li>Important: Copy the generated token and save it somewhere safe. You will need it in the next steps.</li> </ul> </li> </ol>"},{"location":"getting_started/#step-3-configuring-grafana","title":"Step 3: Configuring Grafana \ud83c\udfa8","text":"<p>Grafana needs to be configured to connect to InfluxDB as a data source.</p> <ol> <li> <p>Update the Grafana Datasource Configuration:</p> <ul> <li>Open the file <code>infra/grafana/provisioning/datasources/influx.yml</code> in a text editor.</li> <li>Find the line <code>token: my-token</code> and replace <code>my-token</code> with the InfluxDB API token you generated in the previous step.</li> <li>Save the file.</li> </ul> </li> <li> <p>Restart the Docker Containers:</p> <ul> <li>To apply the changes, restart the Docker containers:   <code>bash   docker compose down   docker compose up -d</code></li> </ul> </li> <li> <p>Configure Alert Notifications (Optional):</p> <ul> <li>ServerPulse comes with pre-configured alerts for low TPS. You can set up notifications for these alerts via Discord or Telegram.</li> <li>For Discord:<ul> <li>Open <code>infra/grafana/provisioning/alerting/discord_contact.yml</code>.</li> <li>Replace <code>https://discord.com/api/webhooks/your-webhook</code> with your Discord webhook URL.</li> </ul> </li> <li>For Telegram:<ul> <li>Open <code>infra/grafana/provisioning/alerting/telegram_contact.yml</code>.</li> <li>Replace <code>your_bot_token</code> with your Telegram bot's token and <code>your_chat_id</code> with your Telegram chat ID.</li> </ul> </li> <li>After making changes, restart the Docker containers again.</li> </ul> </li> </ol>"},{"location":"getting_started/#step-4-installing-the-serverpulse-plugin","title":"Step 4: Installing the ServerPulse Plugin \ud83d\udd0c","text":"<p>Now it's time to install the ServerPulse plugin on your Minecraft server.</p> <ol> <li> <p>Download the Correct Plugin Version:</p> <ul> <li>Go to the ServerPulse releases page and download the JAR file that corresponds to your server platform:<ul> <li>Bukkit/Paper: <code>serverpulse-bukkit-x.x.x.jar</code></li> <li>BungeeCord: <code>serverpulse-bungeecord-x.x.x.jar</code></li> <li>Velocity: <code>serverpulse-velocity-x.x.x.jar</code></li> <li>Fabric: <code>serverpulse-fabric-x.x.x.jar</code></li> </ul> </li> </ul> </li> <li> <p>Install the Plugin:</p> <ul> <li>Copy the downloaded JAR file to the appropriate directory on your server:<ul> <li>Bukkit/Paper/BungeeCord/Velocity: <code>plugins/</code></li> <li>Fabric: <code>mods/</code></li> </ul> </li> </ul> </li> <li> <p>First Run and Configuration:</p> <ul> <li>Start your Minecraft server once to generate the default configuration file.</li> <li>The configuration file will be created in the following location:<ul> <li>Bukkit/Paper: <code>plugins/ServerPulse/config.yml</code></li> <li>BungeeCord: <code>plugins/ServerPulse/config.yml</code></li> <li>Velocity: <code>plugins/serverpulse/config.yml</code></li> <li>Fabric: <code>config/serverpulse/config.yml</code></li> </ul> </li> <li>Stop your server.</li> <li>Open the generated <code>config.yml</code> file and configure it as follows:</li> </ul> <p><code>yaml metrics:   interval: 5   influxdb:     url: http://localhost:8086 # URL of your InfluxDB instance     org: my-org     bucket: metrics_db     token: YOUR_INFLUXDB_TOKEN # Replace with your InfluxDB API token     table: minecraft_stats   tags:     server: \"your-server-name\" # A unique name for this server (e.g., \"survival-1\")</code></p> <ul> <li>Replace <code>YOUR_INFLUXDB_TOKEN</code> with the token you saved earlier.</li> <li>Set a unique <code>server</code> tag to identify this server in Grafana.</li> <li>You can also customize the in-game messages in the <code>messages</code> section of the configuration file.</li> </ul> </li> </ol>"},{"location":"getting_started/#step-5-verifying-the-installation","title":"Step 5: Verifying the Installation \u2705","text":"<ol> <li> <p>Start Your Server:</p> <ul> <li>Start your Minecraft server again.</li> </ul> </li> <li> <p>Check Plugin Status:</p> <ul> <li>In your server console or as an in-game operator, run the status command for your platform:<ul> <li>Bukkit/Paper/Fabric: <code>/serverpulse status</code></li> <li>BungeeCord: <code>/serverpulsebungeecord status</code></li> <li>Velocity: <code>/serverpulsevelocity status</code></li> </ul> </li> <li>You should see a message indicating a successful connection to InfluxDB.</li> </ul> </li> <li> <p>Check the Grafana Dashboard:</p> <ul> <li>Open Grafana in your browser at <code>http://localhost:3000</code>.</li> <li>Log in with the default credentials (<code>admin</code>/<code>admin</code>) and change the password when prompted.</li> <li>Navigate to Dashboards. You should find pre-configured dashboards for your server platform.</li> <li>It may take a few minutes for data to start appearing.</li> </ul> </li> </ol>"},{"location":"getting_started/#platform-specific-features","title":"Platform-Specific Features \ud83c\udf1f","text":"<ul> <li>Bukkit/Paper:<ul> <li>Includes detailed TPS (Ticks Per Second) monitoring. It automatically uses Paper's native TPS retriever if available, otherwise it falls back to a custom implementation for Bukkit.</li> <li>Provides per-world statistics for entities and loaded chunks.</li> </ul> </li> <li>BungeeCord/Velocity:<ul> <li>Monitors player count and ping across your entire proxy network.</li> <li>Tracks memory and disk usage of the proxy server itself.</li> </ul> </li> <li>Fabric:<ul> <li>A native implementation for Fabric servers using the Fabric API.</li> <li>Includes TPS monitoring and per-world metrics for entities and loaded chunks, similar to the Bukkit version.</li> </ul> </li> </ul>"},{"location":"getting_started/#troubleshooting-common-issues","title":"Troubleshooting Common Issues \ud83d\udee0\ufe0f","text":"<ul> <li>InfluxDB Connection Failed:<ul> <li>Double-check that the InfluxDB token in your plugin's <code>config.yml</code> is correct.</li> <li>Ensure that your Minecraft server can reach the InfluxDB URL specified in the config. If they are on different machines, make sure there are no firewall rules blocking the connection.</li> </ul> </li> <li>No Data in Grafana:<ul> <li>Verify that the <code>server</code> tag in your <code>config.yml</code> matches the server tag used in the Grafana dashboard queries.</li> <li>Check your server console for any error messages from the ServerPulse plugin.</li> </ul> </li> <li>Grafana Can't Connect to InfluxDB:<ul> <li>Ensure that the InfluxDB container is running (<code>docker compose ps</code>).</li> <li>Verify that the InfluxDB token in the Grafana datasource configuration is correct.</li> <li>Try restarting the Docker containers: <code>docker compose restart</code>.</li> </ul> </li> </ul>"},{"location":"getting_started/#getting-help","title":"Getting Help \ud83c\udd98","text":"<p>If you run into any issues, you can:</p> <ul> <li>Check the GitHub issue tracker for existing bug reports and feature requests.</li> <li>Open a new issue if you find a bug, providing as much detail as possible.</li> <li>For contributing to the project, please see the contributing guidelines.</li> </ul> <p>Enjoy using ServerPulse to monitor your Minecraft server's performance! \ud83c\udf89</p>"}]}